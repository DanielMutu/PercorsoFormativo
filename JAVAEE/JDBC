

---- JDBC ----

Libreria Java per la connessione al database.

La libreria JDBC include API per le seguenti azioni:

- Creare una connessione MySQL.
- Creare una dichiarazione SQL o MySQL.
- Eseguire una query SQL o MySQL.
- Vedere o modificare i record di una tabella.


Sostanzialmente JDBC è un interfaccia che permette di accedere al database sottostante a diversi tipi di applicativi Java tra cui:

- Java Applications.

- Java Applets.

- Java Servlets.

- Java ServerPages (JSPs).

- Enterprise JavaBeans (EJBs).

---- Architettura JDBC ----

Le API di JDBC si supportano di un JDBC manager driver che decide quale driver utilizzare a seconda dei database.

---- Components JDBC ----

- Driver Manager: Questa classe gestisce i driver che accedono al database. 
- Driver: Questa interfaccia gestisce le comunicazioni con il server di database.
- Connection: questa interfaccia definisce tutti i metodi per la connessione al database.
- Statement: Questa interfaccia fornisce oggetti da mandare al database.
- ResultSet: Questi oggetti raccolgono i dati ottenuti dal database usando gli oggetti Statement. Fa da tramite per accedere ai dati.
- SQLException: Si occupa di gestire gli errori prodotti dal database. 

------------- Sintassy di JDBC ---------------
Passi: 

1. Per prima cosa bisognerà creare un nuovo progetto ed importare la libreria import sql.*;
2. Bisognerà registrare il driver JDBC per aprire una connessione;
3. Aprire una connessione.
4. Eseguire una query.
5. Estrarre i dati.
6. Pulitura da parte di (GC).


// Template per utilizzare JDBC

//***********************************************

//STEP 1. Import required packages
import java.sql.*;

public class FirstExample {
   // JDBC driver name and database URL
   static final String JDBC_DRIVER = "com.mysql.jdbc.Driver";  
   static final String DB_URL = "jdbc:mysql://localhost/EMP";

   //  Database credentials
   static final String USER = "username";
   static final String PASS = "password";
   
   public static void main(String[] args) {
   Connection conn = null;
   Statement stmt = null;
   try{
      //STEP 2: Register JDBC driver
      Class.forName("com.mysql.jdbc.Driver");

      //STEP 3: Open a connection
      System.out.println("Connecting to database...");
      conn = DriverManager.getConnection(DB_URL,USER,PASS);

      //STEP 4: Execute a query
      System.out.println("Creating statement...");
      stmt = conn.createStatement();
      String sql;
      sql = "SELECT id, first, last, age FROM Employees";
      ResultSet rs = stmt.executeQuery(sql);

      //STEP 5: Extract data from result set
      while(rs.next()){
         //Retrieve by column name
         int id  = rs.getInt("id");
         int age = rs.getInt("age");
         String first = rs.getString("first");
         String last = rs.getString("last");

         //Display values
         System.out.print("ID: " + id);
         System.out.print(", Age: " + age);
         System.out.print(", First: " + first);
         System.out.println(", Last: " + last);
      }
      //STEP 6: Clean-up environment
      rs.close();
      stmt.close();
      conn.close();
   }catch(SQLException se){
      //Handle errors for JDBC
      se.printStackTrace();
   }catch(Exception e){
      //Handle errors for Class.forName
      e.printStackTrace();
   }finally{
      //finally block used to close resources
      try{
         if(stmt!=null)
            stmt.close();
      }catch(SQLException se2){
      }// nothing we can do
      try{
         if(conn!=null)
            conn.close();
      }catch(SQLException se){
         se.printStackTrace();
      }//end finally try
   }//end try
   System.out.println("Goodbye!");
}//end main
}//end FirstExample



Register the JDBC driver:


//***********************************************
---- JDBC Driver ----

Fornisce JDBC API per interagire con il tuo JDBC server, per esempio:
- Aprire la connessione al database.
- Chiedere dati oppure inviare dati.
- Eliminare dati o modificare dati.

I driver variano a per i diversi sistemi operativi sono 4. Il 4 (Scritto interamente in java è quello preferito).

Dopo aver registrato il driver nel tuo programma, puoi utilizzarlo.
Il modo più comune per registrare il driver è:

//*******************************************************
try {
   Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
}
catch(ClassNotFoundException ex) {
   System.out.println("Error: unable to load driver class!");
   System.exit(1);
catch(IllegalAccessException ex) {
   System.out.println("Error: access problem while loading!");
   System.exit(2);
catch(InstantiationException ex) {
   System.out.println("Error: unable to instantiate driver!");
   System.exit(3);
}

//*******************************************************
   
Una seconda soluzione può essere questa:

//***********************************************************
try {
   Driver myDriver = new oracle.jdbc.driver.OracleDriver();
   DriverManager.registerDriver( myDriver );
}
catch(ClassNotFoundException ex) {
   System.out.println("Error: unable to load driver class!");
   System.exit(1);
}
//***********************************************************

Dopo aver stabilito il driver è possibile impostare la connessione con:

DriverManager.getConnection();

getConnection() accetta i seguenti seguenti parametri: 

      - getConnection(String url)

      - getConnection(String url, Properties prop)

      - getConnection(String url, String user, String password)


Codice per la connessione:

import java.util.*;

String URL = "jdbc:oracle:thin:@amrood:1521:EMP";
Properties info = new Properties( );
info.put( "user", "username" );
info.put( "password", "password" );
Connection conn = DriverManager.getConnection(URL, info);

Le interfacce Statement, CallableStatement e PreparedStatement definiscono i metodi e le proprietà che consentono di mandare comandi SQL o PL/SQL e ricevere dati dal database.

      Statement: Usato in generale per accedere al database. Non può accettare parametri.
      PreparedStatement: Quando si vuole accedere al database molte volte, accetta parametri input.
      CallableStatement: Quando voglio utilizzare delle procedure immmagazinate nel database.


Supponiamo di avere la suddetta procedura:
"
      DELIMITER $$

      DROP PROCEDURE IF EXISTS `EMP`.`getEmpName` $$
      CREATE PROCEDURE `EMP`.`getEmpName` 
         (IN EMP_ID INT, OUT EMP_FIRST VARCHAR(255))
      BEGIN
         SELECT first INTO EMP_FIRST
         FROM Employees
         WHERE ID = EMP_ID;
      END $$

      DELIMITER ;
"
!Attenzione: PreparedStatement accetta solamente  i parametri in ingresso, invece, CallableStatement accetta tutti e tre i parametri.

La procedura può essere richiamata dal codice Java con la seguente procedura:
   "
      CallableStatement cstmt = null;
      try {
         String SQL = "{call getEmpName (?, ?)}";
         cstmt = conn.prepareCall (SQL);
         . . .
      }
      catch (SQLException e) {
         . . .
      }
      finally {
         . . .
      }
   "

L'oggetto ResultSet che raccoglie i risultati di una query, può essere scomposto in tree categorie:
- Navigational methods: Usato per muovere il cursore che punta ad una query verso il basso.
- Get methods: Utilizzata per visualizzare i dati della riga corrente a cui il puntatore punta.
- Update methods: Utilizzato per fare l'update della riga corrente.

Il resultSet inoltre può avere un tipo, ci sono diversi tipi di resultSet:

- ResultSet.TYPE_FORWARD_ONLY -> Il cursore può muoversi solamente in avanti.

- ResultSet.TYPE_SCROLL_INSENSITIVE -> Il cursore può muoversi avanti ed indietro, E il set di risultati NON è sensibile alle modifiche apportate da altri utenti al database che si verificano dopo che è stato creato il set di risultati.

- ResultSet.TYPE_SCROLL_SENSITIVE -> Il cursore può muoversi avanti ed indietro, E il set di risultati è sensibile alle modifiche apportate da altri utenti al database che si verificano dopo che è stato creato il set di risultati.

Esempio di codice:

try {
   Statement stmt = conn.createStatement(
                           ResultSet.TYPE_FORWARD_ONLY,
                           ResultSet.CONCUR_READ_ONLY);
}
catch(Exception ex) {
   ....
}
finally {
   ....
}

VEDERE LE RIGHE:

- Visualizzazione di un set di risultati l'interfaccia ResultSet contiene decine di metodi per ottenere i dati della riga corrente.

   METODI:
   
public int getInt(String columnName) throws SQLException

Restituisce l'int della riga corrente della colonna chimata columnName.

public int getInt(int columnIndex) throws SQLException

REstituisce l'int della riga corrente e passiamo come parametro index della colonna (La prima colonna vale 1).

