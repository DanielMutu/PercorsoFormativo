

---- JDBC ----

Libreria Java per la connessione al database.

La libreria JDBC include API per le seguenti azioni:

- Creare una connessione MySQL.
- Creare una dichiarazione SQL o MySQL.
- Eseguire una query SQL o MySQL.
- Vedere o modificare i record di una tabella.


Sostanzialmente JDBC è un interfaccia che permette di accedere al database sottostante a diversi tipi di applicativi Java tra cui:

- Java Applications.

- Java Applets.

- Java Servlets.

- Java ServerPages (JSPs).

- Enterprise JavaBeans (EJBs).

---- Architettura JDBC ----

Le API di JDBC si supportano di un JDBC manager driver che decide quale driver utilizzare a seconda dei database.

---- Components JDBC ----

- Driver Manager: Questa classe gestisce i driver che accedono al database. 
- Driver: Questa interfaccia gestisce le comunicazioni con il server di database.
- Connection: questa interfaccia definisce tutti i metodi per la connessione al database.
- Statement: Questa interfaccia fornisce oggetti da mandare al database.
- ResultSet: Questi oggetti raccolgono i dati ottenuti dal database usando gli oggetti Statement. Fa da tramite per accedere ai dati.
- SQLException: Si occupa di gestire gli errori prodotti dal database. 

------------- Sintassy di JDBC ---------------
Passi: 

1. Per prima cosa bisognerà creare un nuovo progetto ed importare la libreria import sql.*;
2. Bisognerà registrare il driver JDBC per aprire una connessione;
3. Aprire una connessione.
4. Eseguire una query.
5. Estrarre i dati.
6. Pulitura da parte di (GC).


// Template per utilizzare JDBC

//***********************************************

//STEP 1. Import required packages
import java.sql.*;

public class FirstExample {
   // JDBC driver name and database URL
   static final String JDBC_DRIVER = "com.mysql.jdbc.Driver";  
   static final String DB_URL = "jdbc:mysql://localhost/EMP";

   //  Database credentials
   static final String USER = "username";
   static final String PASS = "password";
   
   public static void main(String[] args) {
   Connection conn = null;
   Statement stmt = null;
   try{
      //STEP 2: Register JDBC driver
      Class.forName("com.mysql.jdbc.Driver");

      //STEP 3: Open a connection
      System.out.println("Connecting to database...");
      conn = DriverManager.getConnection(DB_URL,USER,PASS);

      //STEP 4: Execute a query
      System.out.println("Creating statement...");
      stmt = conn.createStatement();
      String sql;
      sql = "SELECT id, first, last, age FROM Employees";
      ResultSet rs = stmt.executeQuery(sql);

      //STEP 5: Extract data from result set
      while(rs.next()){
         //Retrieve by column name
         int id  = rs.getInt("id");
         int age = rs.getInt("age");
         String first = rs.getString("first");
         String last = rs.getString("last");

         //Display values
         System.out.print("ID: " + id);
         System.out.print(", Age: " + age);
         System.out.print(", First: " + first);
         System.out.println(", Last: " + last);
      }
      //STEP 6: Clean-up environment
      rs.close();
      stmt.close();
      conn.close();
   }catch(SQLException se){
      //Handle errors for JDBC
      se.printStackTrace();
   }catch(Exception e){
      //Handle errors for Class.forName
      e.printStackTrace();
   }finally{
      //finally block used to close resources
      try{
         if(stmt!=null)
            stmt.close();
      }catch(SQLException se2){
      }// nothing we can do
      try{
         if(conn!=null)
            conn.close();
      }catch(SQLException se){
         se.printStackTrace();
      }//end finally try
   }//end try
   System.out.println("Goodbye!");
}//end main
}//end FirstExample



Register the JDBC driver:


//***********************************************



