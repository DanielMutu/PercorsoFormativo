

---- JDBC ----

Libreria Java per la connessione al database.

La libreria JDBC include API per le seguenti azioni:

- Creare una connessione MySQL.
- Creare una dichiarazione SQL o MySQL.
- Eseguire una query SQL o MySQL.
- Vedere o modificare i record di una tabella.


Sostanzialmente JDBC è un interfaccia che permette di accedere al database sottostante a diversi tipi di applicativi Java tra cui:

- Java Applications.

- Java Applets.

- Java Servlets.

- Java ServerPages (JSPs).

- Enterprise JavaBeans (EJBs).

---- Architettura JDBC ----

Le API di JDBC si supportano di un JDBC manager driver che decide quale driver utilizzare a seconda dei database.

---- Components JDBC ----

- Driver Manager: Questa classe gestisce i driver che accedono al database. 
- Driver: Questa interfaccia gestisce le comunicazioni con il server di database.
- Connection: questa interfaccia definisce tutti i metodi per la connessione al database.
- Statement: Questa interfaccia fornisce oggetti da mandare al database.
- ResultSet: Questi oggetti raccolgono i dati ottenuti dal database usando gli oggetti Statement. Fa da tramite per accedere ai dati.
- SQLException: Si occupa di gestire gli errori prodotti dal database. 

------------- Sintassy di JDBC ---------------
Passi: 

1. Per prima cosa bisognerà creare un nuovo progetto ed importare la libreria import sql.*;
2. Bisognerà registrare il driver JDBC per aprire una connessione;
3. Aprire una connessione.
4. Eseguire una query.
5. Estrarre i dati.
6. Pulitura da parte di (GC).


// Template per utilizzare JDBC

//***********************************************

//STEP 1. Import required packages
import java.sql.*;

public class FirstExample {
   // JDBC driver name and database URL
   static final String JDBC_DRIVER = "com.mysql.jdbc.Driver";  
   static final String DB_URL = "jdbc:mysql://localhost/EMP";

   //  Database credentials
   static final String USER = "username";
   static final String PASS = "password";
   
   public static void main(String[] args) {
   Connection conn = null;
   Statement stmt = null;
   try{
      //STEP 2: Register JDBC driver
      Class.forName("com.mysql.jdbc.Driver");

      //STEP 3: Open a connection
      System.out.println("Connecting to database...");
      conn = DriverManager.getConnection(DB_URL,USER,PASS);

      //STEP 4: Execute a query
      System.out.println("Creating statement...");
      stmt = conn.createStatement();
      String sql;
      sql = "SELECT id, first, last, age FROM Employees";
      ResultSet rs = stmt.executeQuery(sql);

      //STEP 5: Extract data from result set
      while(rs.next()){
         //Retrieve by column name
         int id  = rs.getInt("id");
         int age = rs.getInt("age");
         String first = rs.getString("first");
         String last = rs.getString("last");

         //Display values
         System.out.print("ID: " + id);
         System.out.print(", Age: " + age);
         System.out.print(", First: " + first);
         System.out.println(", Last: " + last);
      }
      //STEP 6: Clean-up environment
      rs.close();
      stmt.close();
      conn.close();
   }catch(SQLException se){
      //Handle errors for JDBC
      se.printStackTrace();
   }catch(Exception e){
      //Handle errors for Class.forName
      e.printStackTrace();
   }finally{
      //finally block used to close resources
      try{
         if(stmt!=null)
            stmt.close();
      }catch(SQLException se2){
      }// nothing we can do
      try{
         if(conn!=null)
            conn.close();
      }catch(SQLException se){
         se.printStackTrace();
      }//end finally try
   }//end try
   System.out.println("Goodbye!");
}//end main
}//end FirstExample



Register the JDBC driver:


//***********************************************
---- JDBC Driver ----

Fornisce JDBC API per interagire con il tuo JDBC server, per esempio:
- Aprire la connessione al database.
- Chiedere dati oppure inviare dati.
- Eliminare dati o modificare dati.

I driver variano a per i diversi sistemi operativi sono 4. Il 4 (Scritto interamente in java è quello preferito).

Dopo aver registrato il driver nel tuo programma, puoi utilizzarlo.
Il modo più comune per registrare il driver è:

//*******************************************************
try {
   Class.forName("oracle.jdbc.driver.OracleDriver").newInstance();
}
catch(ClassNotFoundException ex) {
   System.out.println("Error: unable to load driver class!");
   System.exit(1);
catch(IllegalAccessException ex) {
   System.out.println("Error: access problem while loading!");
   System.exit(2);
catch(InstantiationException ex) {
   System.out.println("Error: unable to instantiate driver!");
   System.exit(3);
}

//*******************************************************
   
Una seconda soluzione può essere questa:

//***********************************************************
try {
   Driver myDriver = new oracle.jdbc.driver.OracleDriver();
   DriverManager.registerDriver( myDriver );
}
catch(ClassNotFoundException ex) {
   System.out.println("Error: unable to load driver class!");
   System.exit(1);
}
//***********************************************************

Dopo aver stabilito il driver è possibile impostare la connessione con:

DriverManager.getConnection();

getConnection() accetta i seguenti seguenti parametri: 

      - getConnection(String url)

      - getConnection(String url, Properties prop)

      - getConnection(String url, String user, String password)


Codice per la connessione:

import java.util.*;

String URL = "jdbc:oracle:thin:@amrood:1521:EMP";
Properties info = new Properties( );
info.put( "user", "username" );
info.put( "password", "password" );
Connection conn = DriverManager.getConnection(URL, info);

Le interfacce Statement, CallableStatement e PreparedStatement definiscono i metodi e le proprietà che consentono di mandare comandi SQL o PL/SQL e ricevere dati dal database.

      Statement: Usato in generale per accedere al database. Non può accettare parametri.
      PreparedStatement: Quando si vuole accedere al database molte volte, accetta parametri input.
      CallableStatement: Quando voglio utilizzare delle procedure immmagazinate nel database.


Supponiamo di avere la suddetta procedura:
"
      DELIMITER $$

      DROP PROCEDURE IF EXISTS `EMP`.`getEmpName` $$
      CREATE PROCEDURE `EMP`.`getEmpName` 
         (IN EMP_ID INT, OUT EMP_FIRST VARCHAR(255))
      BEGIN
         SELECT first INTO EMP_FIRST
         FROM Employees
         WHERE ID = EMP_ID;
      END $$

      DELIMITER ;
"
!Attenzione: PreparedStatement accetta solamente  i parametri in ingresso, invece, CallableStatement accetta tutti e tre i parametri.

La procedura può essere richiamata dal codice Java con la seguente procedura:
   "
      CallableStatement cstmt = null;
      try {
         String SQL = "{call getEmpName (?, ?)}";
         cstmt = conn.prepareCall (SQL);
         . . .
      }
      catch (SQLException e) {
         . . .
      }
      finally {
         . . .
      }
   "

L'oggetto ResultSet che raccoglie i risultati di una query, può essere scomposto in tree categorie:
- Navigational methods: Usato per muovere il cursore che punta ad una query verso il basso.
- Get methods: Utilizzata per visualizzare i dati della riga corrente a cui il puntatore punta.
- Update methods: Utilizzato per fare l'update della riga corrente.

Il resultSet inoltre può avere un tipo, ci sono diversi tipi di resultSet:

- ResultSet.TYPE_FORWARD_ONLY -> Il cursore può muoversi solamente in avanti.

- ResultSet.TYPE_SCROLL_INSENSITIVE -> Il cursore può muoversi avanti ed indietro, E il set di risultati NON è sensibile alle modifiche apportate da altri utenti al database che si verificano dopo che è stato creato il set di risultati.

- ResultSet.TYPE_SCROLL_SENSITIVE -> Il cursore può muoversi avanti ed indietro, E il set di risultati è sensibile alle modifiche apportate da altri utenti al database che si verificano dopo che è stato creato il set di risultati.

Esempio di codice:

try {
   Statement stmt = conn.createStatement(
                           ResultSet.TYPE_FORWARD_ONLY,
                           ResultSet.CONCUR_READ_ONLY);
}
catch(Exception ex) {
   ....
}
finally {
   ....
}

VEDERE LE RIGHE:

- Visualizzazione di un set di risultati l'interfaccia ResultSet contiene decine di metodi per ottenere i dati della riga corrente.

   METODI:
   
public int getInt(String columnName) throws SQLException

Restituisce l'int della riga corrente della colonna chimata columnName.

public int getInt(int columnIndex) throws SQLException

REstituisce l'int della riga corrente e passiamo come parametro index della colonna (La prima colonna vale 1).


 ---- JDBC  TRANSACTION ---- 
 
 Per aumentare le prestazioni si ricorre alle transaction:
 Per esempio per disattivare l'auto commit in una transazione si utilizza:
 
      conn.setAutoCommit(false);
      
Una volta eseguite le modifiche e si vogliono eseguire le modifiche si può applicare il metodo commit.
   
   conn.commit();

Per riavvolgere le modifiche eseguite sul database si può a questo punto utilizzare il metodo 

   conn.rollback();
   
Esempio di codice che utilizza il commit() e rollback()

//******************************************

try{
   //Assume a valid connection object conn
   conn.setAutoCommit(false);
   Statement stmt = conn.createStatement();
   
   String SQL = "INSERT INTO Employees  " +
                "VALUES (106, 20, 'Rita', 'Tez')";
   stmt.executeUpdate(SQL);  
   //Submit a malformed SQL statement that breaks
   String SQL = "INSERTED IN Employees  " +
                "VALUES (107, 22, 'Sita', 'Singh')";
   stmt.executeUpdate(SQL);
   // If there is no error.
   conn.commit();
}catch(SQLException se){
   // If there is any error.
   conn.rollback();
}

//*****************************************************

--- JDBC SavePOint ----

Il SavePoint è un punto di ripristino  se si dovesse verificare qualche tipo di errore, si ritornerà all'ultimo rollback;
Esempio:

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

try{
   //Assume a valid connection object conn
   conn.setAutoCommit(false);
   Statement stmt = conn.createStatement();
   
   //PARTE IMPORTANTE DOVE SI SETTA UN SAVEPOINT!!
   Savepoint savepoint1 = conn.setSavepoint("Savepoint1");
   String SQL = "INSERT INTO Employees " +
                "VALUES (106, 20, 'Rita', 'Tez')";
   stmt.executeUpdate(SQL);  
   //Submit a malformed SQL statement that breaks
   String SQL = "INSERTED IN Employees " +
                "VALUES (107, 22, 'Sita', 'Tez')";
   stmt.executeUpdate(SQL);
   // If there is no error, commit the changes.
   conn.commit();

}catch(SQLException se){
   // If there is any error.
   conn.rollback(savepoint1);
}

//+++++++++++++++++++++++++++++++++++++++++++++++++

---- JDBC Exceptions Handling ----

Per gestire le eccezioni in java:

//++++++++++++++++++++++++++++++++++++++++++++++

try {
   // Your risky code goes between these curly braces!!!
}
catch(Exception ex) {
   // Your exception handling code goes between these 
   // curly braces, similar to the exception clause 
   // in a PL/SQL block.
}
finally {
   // Your must-always-be-executed code goes between these 
   // curly braces. Like closing database connection.
}

//++++++++++++++++++++++++++++++++++++++++++++++++++

---- JDBC - Batch Processing ----

Batch processing consente di inviare in una sola chiamata molteplici richieste al database.
In questo modo si riducono i tempi migliorando le prestazioni. Un esempio di branch:

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

         // Create statement object
         Statement stmt = conn.createStatement();

         // Set auto-commit to false
         conn.setAutoCommit(false);

         // Create SQL statement
         String SQL = "INSERT INTO Employees (id, first, last, age) " +
                      "VALUES(200,'Zia', 'Ali', 30)";
         // Add above SQL statement in the batch.
         stmt.addBatch(SQL);

         // Create one more SQL statement
         String SQL = "INSERT INTO Employees (id, first, last, age) " +
                      "VALUES(201,'Raj', 'Kumar', 35)";
         // Add above SQL statement in the batch.
         stmt.addBatch(SQL);

         // Create one more SQL statement
         String SQL = "UPDATE Employees SET age = 35 " +
                      "WHERE id = 100";
         // Add above SQL statement in the batch.
         stmt.addBatch(SQL);

         // Create an int[] to hold returned values
         int[] count = stmt.executeBatch();

         //Explicitly commit statements to apply changes
         conn.commit();

//*************************************************

---- JDBC Streaming ASCII and Binary Data ----

Vengono utilizzati per il trasferimento di grandi quantità di dati.
(Come per esmpio i Blob)


---- Esempio di caricamneto di un file xml in una tabella. ----
Abbiamo qui il nostro file .xml
//++++++++++++++++++++++++++++++++++
      <?xml version="1.0"?>
      <Employee>
      <id>100</id>
      <first>Zara</first>
      <last>Ali</last>
      <Salary>10000</Salary>
      <Dob>18-08-1978</Dob>
      <Employee>
//++++++++++++++++++++++++++++++++++


Codice Java:

// Import required packages
import java.sql.*;
import java.io.*;
import java.util.*;

public class JDBCExample {
   // JDBC driver name and database URL
   static final String JDBC_DRIVER = "com.mysql.jdbc.Driver";  
   static final String DB_URL = "jdbc:mysql://localhost/EMP";

   //  Database credentials
   static final String USER = "username";
   static final String PASS = "password";
   
   public static void main(String[] args) {
   Connection conn = null;
   PreparedStatement pstmt = null;
   Statement stmt = null;
   ResultSet rs = null;
   try{
      // Register JDBC driver
      Class.forName("com.mysql.jdbc.Driver");

      // Open a connection
      System.out.println("Connecting to database...");
      conn = DriverManager.getConnection(DB_URL,USER,PASS);

      //Create a Statement object and build table
      stmt = conn.createStatement();
      createXMLTable(stmt);

      //Open a FileInputStream
      File f = new File("XML_Data.xml");
      long fileLength = f.length();
      FileInputStream fis = new FileInputStream(f);

      //Create PreparedStatement and stream data
      String SQL = "INSERT INTO XML_Data VALUES (?,?)";
      pstmt = conn.prepareStatement(SQL);
      pstmt.setInt(1,100);
      pstmt.setAsciiStream(2,fis,(int)fileLength);
      pstmt.execute();

      //Close input stream
      fis.close();

      // Do a query to get the row
      SQL = "SELECT Data FROM XML_Data WHERE id=100";
      rs = stmt.executeQuery (SQL);
      // Get the first row
      if (rs.next ()){
         //Retrieve data from input stream
         InputStream xmlInputStream = rs.getAsciiStream (1);
         int c;
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         while (( c = xmlInputStream.read ()) != -1)
            bos.write(c);
         //Print results
         System.out.println(bos.toString());
      }
      // Clean-up environment
      rs.close();
      stmt.close();
      pstmt.close();
      conn.close();
   }catch(SQLException se){
      //Handle errors for JDBC
      se.printStackTrace();
   }catch(Exception e){
      //Handle errors for Class.forName
      e.printStackTrace();
   }finally{
      //finally block used to close resources
      try{
         if(stmt!=null)
            stmt.close();
      }catch(SQLException se2){
      }// nothing we can do
      try{
         if(pstmt!=null)
            pstmt.close();
      }catch(SQLException se2){
      }// nothing we can do
      try{
         if(conn!=null)
            conn.close();
      }catch(SQLException se){
         se.printStackTrace();
      }//end finally try
   }//end try
   System.out.println("Goodbye!");
}//end main

public static void createXMLTable(Statement stmt) 
   throws SQLException{
   System.out.println("Creating XML_Data table..." );
   //Create SQL Statement
   String streamingDataSql = "CREATE TABLE XML_Data " +
                             "(id INTEGER, Data LONG)";
   //Drop table first if it exists.
   try{
      stmt.executeUpdate("DROP TABLE XML_Data");
   }catch(SQLException se){
   }// do nothing
   //Build table.
   stmt.executeUpdate(streamingDataSql);
}//end createXMLTable
}//end JDBCExample

